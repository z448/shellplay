#!/usr/bin/env perl

use Encode;
use Data::Dumper;
use Time::HiRes qw( usleep );
use IO::Handle;
use Getopt::Std;
STDOUT->autoflush(1);
use open qw<:encoding(UTF-8)>;

=head1

App::shellplay - replay and execute commands from file

=cut

my @file = ();
getopts('f:', \%switch);

if(defined $switch{f}){
    open(my $fh,"<",$switch{f}) || die "cant open $switch{f}: $!";
    for(<$fh>){ push @file, $_ }
} else { @file = <DATA> }


sub printer {
    my $line = shift;
    my @line = split(//, $line);
}


for(@file){
    if($_ =~ /^vi/m){ print "\n\nshellplay does not support editors\n\n" and die }
    my @command = printer($_);
    for(@command){
        print "$_";
        usleep(80000);
    }
        print `$_`;
        usleep(80000);
}



=head1 SYNOPSIS

`splay` command will write and execute commands from prepared file. Usefull for presentations and creating gif/video tutorials.

=head1 USAGE

Create file  with your shell commands. 

use C<splay -f /path/to/file>" to repaly and execute commands in file

Note that shellplay doesnt support tools which output is not terminal like editors (vim, nano etc.)

=head1 GIF

L<https://github.com/z448/shellplay>

=cut

